/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface BookPaymentInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "completedPayments"
      | "isPaymentCompleted"
      | "makePayment"
      | "orderAmounts"
      | "owner"
      | "setOrderAmount"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "PaymentCompleted" | "PaymentReceived"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "completedPayments",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPaymentCompleted",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "makePayment", values: [string]): string;
  encodeFunctionData(
    functionFragment: "orderAmounts",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setOrderAmount",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "completedPayments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPaymentCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makePayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOrderAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace PaymentCompletedEvent {
  export type InputTuple = [
    orderId: string,
    from: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [orderId: string, from: string, amount: bigint];
  export interface OutputObject {
    orderId: string;
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentReceivedEvent {
  export type InputTuple = [
    from: AddressLike,
    amount: BigNumberish,
    orderId: string
  ];
  export type OutputTuple = [from: string, amount: bigint, orderId: string];
  export interface OutputObject {
    from: string;
    amount: bigint;
    orderId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BookPayment extends BaseContract {
  connect(runner?: ContractRunner | null): BookPayment;
  waitForDeployment(): Promise<this>;

  interface: BookPaymentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  completedPayments: TypedContractMethod<[arg0: string], [boolean], "view">;

  isPaymentCompleted: TypedContractMethod<[orderId: string], [boolean], "view">;

  makePayment: TypedContractMethod<[orderId: string], [void], "payable">;

  orderAmounts: TypedContractMethod<[arg0: string], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  setOrderAmount: TypedContractMethod<
    [orderId: string, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "completedPayments"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPaymentCompleted"
  ): TypedContractMethod<[orderId: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "makePayment"
  ): TypedContractMethod<[orderId: string], [void], "payable">;
  getFunction(
    nameOrSignature: "orderAmounts"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setOrderAmount"
  ): TypedContractMethod<
    [orderId: string, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "PaymentCompleted"
  ): TypedContractEvent<
    PaymentCompletedEvent.InputTuple,
    PaymentCompletedEvent.OutputTuple,
    PaymentCompletedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentReceived"
  ): TypedContractEvent<
    PaymentReceivedEvent.InputTuple,
    PaymentReceivedEvent.OutputTuple,
    PaymentReceivedEvent.OutputObject
  >;

  filters: {
    "PaymentCompleted(string,address,uint256)": TypedContractEvent<
      PaymentCompletedEvent.InputTuple,
      PaymentCompletedEvent.OutputTuple,
      PaymentCompletedEvent.OutputObject
    >;
    PaymentCompleted: TypedContractEvent<
      PaymentCompletedEvent.InputTuple,
      PaymentCompletedEvent.OutputTuple,
      PaymentCompletedEvent.OutputObject
    >;

    "PaymentReceived(address,uint256,string)": TypedContractEvent<
      PaymentReceivedEvent.InputTuple,
      PaymentReceivedEvent.OutputTuple,
      PaymentReceivedEvent.OutputObject
    >;
    PaymentReceived: TypedContractEvent<
      PaymentReceivedEvent.InputTuple,
      PaymentReceivedEvent.OutputTuple,
      PaymentReceivedEvent.OutputObject
    >;
  };
}
